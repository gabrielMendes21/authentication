import Head from 'next/head'
import { useForm } from 'react-hook-form'
import axios from 'axios'
import Router from 'next/router'
import { Fade } from 'react-reveal'

export default function CreateNewAccount() {
  const { register, handleSubmit, formState: { errors }} = useForm()

  async function handleSignUp(data) {
    try {
      const response = await axios.post(`../api/users`, {
          name: data.name,
          email: data.email,
          password: data.password
      })

      alert(response.data)
      
      Router.push('/login')
    } catch(err) {
      alert(err.response.data)
      console.log(err)
    }
  }

  return (
    <>
      <Head>
        <title>Auth</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h1 className="font-medium text-4xl mb-10">Create a new account</h1>

        <div className="bg-zinc-300 rounded-md p-5">
          <form className="flex flex-col gap-2" onSubmit={handleSubmit(handleSignUp)}>
            <label htmlFor="name">Name</label>
            <input 
              {...register("name", { required: true })} 
              id="name"
              name="name"
              className="p-1 rounded-md"
              placeholder="Type your first name"
            />
            {
                errors.name?.type === "required" && 
                <Fade>
                  <p role="alert" className="text-red-500 font-medium text-sm">Name is required</p>
                </Fade>
            }

            <label htmlFor="email">Email</label>
            <input 
              {...register("email", { required: true, pattern: /.+@.+.com/ })} 
              id="email" 
              name="email" 
              className="p-1 rounded-md"
              placeholder="Type your email" 
            />
            {
              errors.email?.type === 'required' && 
              <Fade>
                <p role="alert" className="text-red-500 font-medium text-sm">Email is required</p>
              </Fade>
            }
            {
              errors.email?.type === 'pattern' && 
              <Fade>
                <p role="alert" className="text-red-500 font-medium text-sm">Type an email like: example@email.com</p>
              </Fade>
            }

            <label htmlFor="password">Password</label>
            <input 
              type="password"
              {...register("password", { required: true })} 
              id="password" 
              name="password" 
              className="p-1 rounded-md"
              placeholder="Type your password"
            />
            {
              errors.password?.type === "required" && 
              <Fade>
                <p role="alert" className="text-red-500 font-medium text-sm">Password is required</p>
              </Fade>
            }

            <button className="bg-cyan-600 rounded-md py-2 mt-5">Sign up</button>
          </form>
        </div>
      </main>
    </>
  )
}